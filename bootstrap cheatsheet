Installation
- To Install directly download files from here: https://getbootstrap.com/docs/5.0/getting-started/download/
- Link to css/bootstrap.css and js/bootstrap.js
- TIP: To open the console: press Ctr+Shift+I
- To check whether bootstrap has loaded, go to the network tab after the above step. 
- To install all dependencies at once, load js/bootstrap.bundle.js

Install Via CDN
-Link to get CDN: https://getbootstrap.com/docs/5.0/getting-started/download/

The Js file can be installed while bundled or not bundled. 

========BOOTSTRAP GRID=========
To check how the display looks like in different devices change the device options on the console
-using GRID, you can make some sections visible or invisible depending on the screen size or make them completely disappear. 
-Check the different breakpoints for the different screen sizes here (Under docs, layout): https://getbootstrap.com/docs/5.0/layout/breakpoints/
- Bootstrap uses rows and columns. 
- In every row, there are 12 units available for use. 
- We have three things when defining our grid system: container, row, column. 


Some common classes. 
- border - for bordering your content. 
- container-fluid:  If you want the websites content to span to the full width of the website. 
- container-md: The container behaves as container, below md breakpoint, it works as container fluid. 
- When using the col class, if size is not specified, then bootstrap divides the columns in that row equally
-   col-5, col-3 the third columns will automatically be 4 units
- col-lg-8 --The columns can be matched.  
- 

# ALIGNMENT
# vertical alignment: (first wrap your columns in a row, give the row some height)
 we use this class: align-items-(start,center,end)

# Horizontal alignment: 
We use this class to center items horizontally: justify-content-center.

NB: the classes for alignment are put alongside the rwo class.


# GUTTERS
Note that gutters only apply to  divs with row class .
gx - eliminates padding in the x axis, hence eliminating spaces left between the columns and the end of the screen. 
gy - varying this varies top - vertical spacing between rows.  
The above can take values 1-5. 

gx-1, gx-2, gy-4, gy-5.


<!-- buttons -->
- buttons take the btn class,then btn-color(color might be primary,secodary,success,info etc)
- to adjust size of the btn, we use the add the following classes: btn-sm, btn-lg,  

<!-- Cards -->
- from bootstrap documentation, copy the example card
- for different sizing, remove the style attribute from the card parent div, use one of the following concepts to size the card: 
        - row columns concept to size the cards by wrapping the card div inside. 
        - wrapp the card in the row, in the card div, specify class w-50 (for 50% width card), w-75, etc. 
        - style the card by specifying the width using the style attribute. 

- We also can use cards to produce well bordered text with padding

- We can also have a card-header before the card-body clas
- We can also have a card-footer, with text-muted or without text-muted. 

<!-- ======more examples on cards -->
- we can use card-group for cards next to each other. 
- We can also use card-deck for cards next to each other but with some margins in between them
- The above should be wrapped with a row class. 
- the are also card styles and outline styles. 

<!-- typography -->
we use h1 to h6 html tags. 
These tags are responsive. their font sizes change with size of the screen. 
- we can also use h1 class in other html elements to make them look like headings. 
- text-start, text-center, text-end
<!-- Images -->
- To make an image responsive/fit in a div, we use the class img-fluid
- the img-thumbnail class adds a border aroung the image
- 

<!-- Aligning Images -->
- class float-end pushes the image to the far left of the container. 
- Use the clearfix property before float-end so that the image is not wrapped around by text. 

<!-- utilities -->
- mt-5 - for margin, specify the side and the size. size varies from 1-5. 
- border class: adds a border
- border-5: to specify thickness of the border. 
- border-dark: to specify the color of the border. 

Background - you can also specify different opacities for the backgrounds. 
width - w-50, w-25: w-50 : Width is 50%.
Centering a div: mx-auto

padding
      class  ps-5: padding start 5, gives a padding-left. 
       class  pe-5: padding end 5, gives a padding-right. 
        class px-5: gives padding for both right and left. 
        class p-5: gives a padding at all sides
        class py-5: gives padding for both top and bottom. 
        class pb-5: for bottom
        class pt-5: apply for the top.

        The above applies for margins. 

Display
        d-none: Makes a particular element not visible. 
        One can specify the screen size for it to be visible and when it should be invisible. e.g d-none d-md-block  shows the element only for medium screen sizes and above

<!--  FLEX -->
- To start with; we give the container a d-flex class. 
- To set the direction we use the class flex-row, flex-column
- check the rest in documentation. Make reference to the css flexbox tutorial. (freecodecamp)

<!-- FLOAT UTILITY -->
- One can float start, end
- float can be applied for different screen sizes. 

<!--  overflow -->
overflow-auto: one is able to scroll if text exceeds an space for an element with fixed width and height dimensions. 
overflow-hidden: Only text that fits is visible. the rest is not seen.
overflow-visible: the text overflows the dimensions of an element.

<!-- positions -->
main classes include position-static, position-relative, position-absolute, position-fixed, position-sticky


top - for the vertical top position
start - for the horizontal left position (in LTR)
bottom - for the vertical bottom position
end - for the horizontal right position (in LTR)

0 - for 0 edge position
50 - for 50% edge position
100 - for 100% edge position

- check documentation for examples



